org: lhazy111
app: serverless-note-app
service:
  name: serverless-note-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing


provider:
  name: aws
  runtime: nodejs12.x
  stage: 'dev'
  region: 'eu-west-1'
  tracing:
    lambda: true
    apiGateway: true

  environment:
    NOTES_TABLE: Notes-${self:provider.stage}
    NOTES_INDEX: UserIndex
    ATTACHMENT_S3_BUCKET: lou-serverless-c4-note-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
 

  logs:
    restApi: true

  

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetNotes:
    handler: src/lambda/http/getNotes.handler
    events:
      - http:
          method: get
          path: notes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/${self:provider.environment.NOTES_INDEX}

  CreateNote:
    handler: src/lambda/http/createNote.handler
    events:
      - http:
          method: post
          path: notes
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-note-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}          
    
  UpdateNote:
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          method: patch
          path: notes/{noteId}
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(models/update-note-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
    
 
  DeleteNote:
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          method: delete
          path: notes/{noteId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: notes/{noteId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:GetSignedUrl
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.NOTES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.NOTES_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    
    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
        Bucket: !Ref AttachmentBucket
